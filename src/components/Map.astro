---
import { cn } from '../utils/cn'

import type { HTMLAttributes } from 'astro/types'

import 'leaflet/dist/leaflet.css'
import 'leaflet-draw/dist/leaflet.draw.css'

type Props = HTMLAttributes<'div'>

const { class: className, ...props } = Astro.props
---

<div id="map" class={cn('h-full w-full', className)} {...props}></div>

<script>
  import L from 'leaflet'
  import 'leaflet-draw'

  document.addEventListener('astro:page-load', () => {
    // Initialize map
    const map = L.map('map', { attributionControl: false }).setView([34.778306, 32.418944], 13)

    // Add tile layer
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map)

    // FeatureGroup to store editable layers
    const drawnItems = new L.FeatureGroup()
    map.addLayer(drawnItems)

    // Color options
    const colors = ['#ea4336', '#1a74e8', '#34a854', '#5dd6fb', '#fcbc05', '#ff00ff']
    let currentColor = colors[0]

    // Initialize draw control with default options
    const drawControl = createDrawControl()
    map.addControl(drawControl)

    // Create custom color control
    const colorControl = L.Control.extend({
      options: {
        position: 'topright',
      },
      onAdd: function () {
        const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control')
        container.style.backgroundColor = 'white'
        container.style.padding = '5px'

        const label = L.DomUtil.create('div', '', container)

        colors.forEach((color) => {
          const colorBtn = L.DomUtil.create('div', 'color-btn', container)
          colorBtn.style.width = '20px'
          colorBtn.style.height = '20px'
          colorBtn.style.backgroundColor = color
          colorBtn.style.cursor = 'pointer'
          colorBtn.style.marginBottom = '3px'
          colorBtn.style.borderRadius = '5px'
          const selectedBorderStyle = '2px solid black'
          const notSelectedBorderStyle = 'none'
          colorBtn.style.border = color === currentColor ? selectedBorderStyle : notSelectedBorderStyle

          L.DomEvent.on(colorBtn, 'click', function () {
            currentColor = color
            document.querySelectorAll<HTMLDivElement>('.color-btn').forEach((el) => {
              el.style.border = notSelectedBorderStyle
            })
            colorBtn.style.border = selectedBorderStyle

            // Remove the old draw control
            map.removeControl(drawControl)

            // Create a new draw control with updated color
            const newDrawControl = createDrawControl()
            map.addControl(newDrawControl)
          })
        })

        return container
      },
    })

    map.addControl(new colorControl())

    // Helper function to create draw control with current color
    function createDrawControl() {
      return new L.Control.Draw({
        draw: {
          polyline: false,
          polygon: {
            allowIntersection: true,
            showArea: true,
            drawError: {
              color: '#e1e100',
              message: "<strong>Oh snap!<strong> you can't draw that!",
            },
            shapeOptions: {
              color: currentColor,
              fillColor: currentColor,
              fillOpacity: 0.3,
            },
          },
          rectangle: false,
          circle: false,
          marker: false,
          circlemarker: false,
        },
        edit: {
          featureGroup: drawnItems,
          remove: true,
        },
      })
    }

    // Handle created objects
    map.on('draw:created', function (e) {
      const layer = e.layer
      drawnItems.addLayer(layer)
    })

    // Fix map size issues if any
    setTimeout(() => {
      map.invalidateSize()
    }, 0)
  })
</script>
